<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane id="AnchorPane" fx:id="aboutAnchorPane" prefHeight="600.0" prefWidth="900.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="bbt28solarsimulator.AboutController">
   <children>
      <ScrollPane fx:id="aboutPane" layoutX="26.0" layoutY="66.0" prefHeight="484.0" prefWidth="594.0">
         <content>
            <TextArea fx:id="textArea" prefHeight="534.0" prefWidth="572.0" text="Program: Bbt28SolarSimulator&#10;&#10;Professor: Nick Wergeles&#10;Course: CS 3330/ Section: 01&#10;Assignment: Final Project&#10;&#10;Author: Brad Boutaugh [Pawprint: Bbt28]&#10;&#10;Purpose: The program serves as an educational tool expressing knowledge&#10;on the planets of the Solar System by means both textual and visual. &#10;&#10;Description: The program is by technical definition a simulation, one that&#10;emulates the differences in orbital duration and path of the planets.&#10;As a secondary feature it displays the unique data of each planet consisting of&#10;orbital period, orbital velocity, mass, volume, mean/equatorial radius, surface &#10;gravity, escape velocity, number of natural satellites (moons, asteroids, etc),&#10;and a brief description of the planet consisting of a few random facts. &#10;&#10;Features: At a glance, the program primarily consist of a visual simulation of the&#10;planets orbit around the sun and a display section of planetary data. Otherwise the&#10;specific feature elements are as follows:&#10;&#9;+Save Function: Saves the current position of the planets into a class. Enacted &#10;&#9;both the menu bar and in a save button towards the bottom.&#10;&#9;+Load Function: Allows user to open a file that will set planets back into their &#10;&#9;previous position. Can be accessed within the menu bar.&#10;&#9;+Go Function: Initiates orbit motion within the emulation. Function worked within&#10;&#9;both the menu bar and a button.&#10;&#9;+Stop Function: Pauses orbit motion within the emulation. Function worked within&#10;&#9;both the menu bar and button.&#10;&#9;+Close Function: Closes the program. Can be accessed within the menu bar.&#10;&#9;+Planet Information Display: Information on each of the planets can be accessed &#10;&#9;through this function either through the named menu items within the menu bar or &#10;&#9;by clicking on the planets themselves. &#10;&#9;+Change Orbit Speed: Via the menu bar there are different speeds that will change &#10;&#9;speed of the planetary orbits within the simulation. Save for the reset option, the&#10;&#9;other menu items are either multipliers or quotients of the speed that will stack.&#10;&#9;As such the user can speed or slow the planets however much the user they desire.&#10;&#9;+Access About Page: Function that leads to new scene with information on the &#10;&#9;program. Seen in the menu bar.&#10;&#9;+Access References Page: Function that leads to information on references/citations&#10;&#9;regarding information on the planets. Seen in the menu bar. &#10;&#9;&#10;&#10;Requirements Fulfillment: &#10;&#10;[A] Classes: The program consists of many classes and by extension many objects.&#10;&#9;- Example: Earth.java (Constructor at line 25; Methods at lines 61,78,89; &#10;&#9;Class instance at line 181 within FXMLDocumentController.java)&#10;&#9;&#10;[B] Subclasses: Two classes are super classes: AbstractModel.java and &#10;&#9;ChangeScene.java. By extension AbstractModel.java has subclasses: &#10;&#9;Mercury,Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune. &#10;&#9;ChangeScene.java has subclasses AboutController, FXMLDocumentController, &#10;&#9;and ReferencesController.&#10;&#9;- Example 1: Mercury can be seen to become subclass to AbstractClass when it&#10;&#9;extends AbstractClass on line 12 of its java file. Also to note is Mercury &#10;&#9;overriding AbstractClass's firePropertyChange method on a number of lines &#10;&#9;including lines 42 - 51, fulfilling a key aspect of subclass creation.&#10;&#9;- Example 2: Likewise, AboutController can be seen to become subclass to &#10;&#9;ChangeScene when it extends ChangeScene on line 23 of its file.&#10;&#9;&#10;[C] Abstract Classes: Both aforementioned superclasses are also abstract. They are&#10;&#9;denoted as such witht the abstract keyword coming before each of their respective&#10;&#9;class names. The keyword can be seen on line 20 in ChangeScene.java and line 15 in&#10;&#9;AbstractModel.java.&#10;&#9;-Example: Implementation of AbstractModel abstract methods can be seen in Mars.java &#10;&#9;at lines 44 - 53 with the implementation of AbstractModel's firePropertyChange method.&#10;&#10;[D] Interfaces: The program has one interface: Planet.java. The &quot;planet&quot; classes: Mercury,&#10;&#9;Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune all implement Planet and &#10;&#9;respectively employ Planet's three methods: getPlanetData(), getPlanetXCoord(), &#10;&#9;getPlanetYCoord().&#10;&#9;-Example 1: The implementation of Planet can be seen on line 12 of Mercury.java and &#10;&#9;implementation of Planet's three methods can be seen on lines 41,55, and 66 in Mercury.&#10;&#9;-Example 2: The implementation of Planet can also be seen on line 12 of Mars.java and &#10;&#9;implementation of the aforementioned methods can be seen on lines 42, 57, and 69 in Mars.&#10;&#9;&#10;[E] Collection Classes: At least one collection class was used. A hashmap within ChangeScene class&#10;&#9;kept a collection of the programs controllers for processing of scene change. The hashmap is &#10;&#9;located on line 23 of ChangeScene.java.&#10;&#10;[F] Exception Handling: Can be found in both the FXMLDocumentController and ChangeScene classes&#10;&#9;in the form of try - catch blocks.&#10;&#9;-Example 1: Try-block statement in FXMLDocumentController at lines 641 and 669 with each &#10;&#9;respectively covering save and load methods.&#10;&#9;-Example 2: Try-block statement in ChangeScene at line 32.&#10;&#9;&#10;[G] Model-View-Controller: The program has a number of model classes, three controllers, and&#10;three view files. Though not as clearly marked as the AbstractModel class, most of the other&#10;classes perform the model role of holding data and the methods that would act on said data.&#10;The AbstractModel served as a key aspect to maintaining MVC as it provided property change&#10;functions to the other classes by which there was an extra go between for work that needed to &#10;done on the view elements post action from the various model classes. &#10;&#9;&#10;[H] Save/Open Files: As mentioned before there are save and load methods within the program.&#10;Both are held within the FXMLDocumentController.java class with the save method being at line&#10;635 and the load method being at line 663. &#10;&#10;Complications: Getting a full representation of the planets proved difficult given the large&#10;differences in size between planets as well as the scale of their distances between one another.&#10;To represent them to scale on a reasonable sized application would involve planetes such as &#10;Mercury and mars being small to the point of barely registering on screen. As such sizes and &#10;most of the scaling was reduced. Planetary size differences still generally hold up though &#10;larger planets such as Jupiter recieved a little more size reduction. Orbital eccentricity was&#10;ignored while the semi-major axis and planetary duration was brough mostly to scale. &#10;" />
         </content></ScrollPane>
      <Button fx:id="backButton" layoutX="239.0" layoutY="25.0" mnemonicParsing="false" onAction="#goBack" prefHeight="25.0" prefWidth="57.0" text="Back" />
      <Label fx:id="aboutLabel" layoutX="37.0" layoutY="29.0" text="About:" />
   </children>
</AnchorPane>
